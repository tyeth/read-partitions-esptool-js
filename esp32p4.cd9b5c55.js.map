{"mappings":"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","sources":["../../lib/targets/esp32p4.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\r\nexport class ESP32P4ROM extends ESP32ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32-P4\";\r\n        this.IMAGE_CHIP_ID = 18;\r\n        this.IROM_MAP_START = 0x40000000;\r\n        this.IROM_MAP_END = 0x4c000000;\r\n        this.DROM_MAP_START = 0x40000000;\r\n        this.DROM_MAP_END = 0x4c000000;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0x2000; // First 2 sectors are reserved for FE purposes\r\n        this.CHIP_DETECT_MAGIC_VALUE = [0x0, 0x0addbad0];\r\n        this.UART_DATE_REG_ADDR = 0x500ca000 + 0x8c;\r\n        this.EFUSE_BASE = 0x5012d000;\r\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\r\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\r\n        this.SPI_REG_BASE = 0x5008d000; // SPIMEM1\r\n        this.SPI_USR_OFFS = 0x18;\r\n        this.SPI_USR1_OFFS = 0x1c;\r\n        this.SPI_USR2_OFFS = 0x20;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\r\n        this.SPI_MISO_DLEN_OFFS = 0x28;\r\n        this.SPI_W0_OFFS = 0x58;\r\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\r\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\r\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\r\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\r\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\r\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\r\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\r\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\r\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\r\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\r\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\r\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\r\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\r\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\r\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\r\n        this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\r\n        this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\r\n        this.PURPOSE_VAL_XTS_AES128_KEY = 4;\r\n        this.SUPPORTS_ENCRYPTED_FLASH = true;\r\n        this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x40000000, 0x4c000000, \"DROM\"],\r\n            [0x4ff00000, 0x4ffa0000, \"DRAM\"],\r\n            [0x4ff00000, 0x4ffa0000, \"BYTE_ACCESSIBLE\"],\r\n            [0x4fc00000, 0x4fc20000, \"DROM_MASK\"],\r\n            [0x4fc00000, 0x4fc20000, \"IROM_MASK\"],\r\n            [0x40000000, 0x4c000000, \"IROM\"],\r\n            [0x4ff00000, 0x4ffa0000, \"IRAM\"],\r\n            [0x50108000, 0x50110000, \"RTC_IRAM\"],\r\n            [0x50108000, 0x50110000, \"RTC_DRAM\"],\r\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\r\n        ];\r\n        this.UF2_FAMILY_ID = 0x3d308e94;\r\n        this.EFUSE_MAX_KEY = 5;\r\n        this.KEY_PURPOSES = {\r\n            0: \"USER/EMPTY\",\r\n            1: \"ECDSA_KEY\",\r\n            2: \"XTS_AES_256_KEY_1\",\r\n            3: \"XTS_AES_256_KEY_2\",\r\n            4: \"XTS_AES_128_KEY\",\r\n            5: \"HMAC_DOWN_ALL\",\r\n            6: \"HMAC_DOWN_JTAG\",\r\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\r\n            8: \"HMAC_UP\",\r\n            9: \"SECURE_BOOT_DIGEST0\",\r\n            10: \"SECURE_BOOT_DIGEST1\",\r\n            11: \"SECURE_BOOT_DIGEST2\",\r\n            12: \"KM_INIT_KEY\",\r\n        };\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const numWord = 2;\r\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        return (registerValue >> 27) & 0x07;\r\n    }\r\n    async getMinorChipVersion(loader) {\r\n        const numWord = 2;\r\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        return (registerValue >> 0) & 0x0f;\r\n    }\r\n    async getMajorChipVersion(loader) {\r\n        const numWord = 2;\r\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        return (registerValue >> 4) & 0x03;\r\n    }\r\n    async getChipDescription(loader) {\r\n        const pkgVersion = await this.getPkgVersion(loader);\r\n        const chipName = pkgVersion === 0 ? \"ESP32-P4\" : \"unknown ESP32-P4\";\r\n        const majorRev = await this.getMajorChipVersion(loader);\r\n        const minorRev = await this.getMinorChipVersion(loader);\r\n        return `${chipName} (revision v${majorRev}.${minorRev})`;\r\n    }\r\n    async getChipFeatures(loader) {\r\n        return [\"High-Performance MCU\"];\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        return 40; // ESP32P4 XTAL is fixed to 40MHz\r\n    }\r\n    async getFlashVoltage(loader) {\r\n        return;\r\n    }\r\n    async overrideVddsdio(loader) {\r\n        loader.debug(\"VDD_SDIO overrides are not supported for ESP32-P4\");\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\r\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n    async getFlashCryptConfig(loader) {\r\n        return; // doesn't exist on ESP32-P4\r\n    }\r\n    async getSecureBootEnabled(laoder) {\r\n        const registerValue = await laoder.readReg(this.EFUSE_SECURE_BOOT_EN_REG);\r\n        return registerValue & this.EFUSE_SECURE_BOOT_EN_MASK;\r\n    }\r\n    async getKeyBlockPurpose(loader, keyBlock) {\r\n        if (keyBlock < 0 || keyBlock > this.EFUSE_MAX_KEY) {\r\n            loader.debug(`Valid key block numbers must be in range 0-${this.EFUSE_MAX_KEY}`);\r\n            return;\r\n        }\r\n        const regShiftDictionary = [\r\n            [this.EFUSE_PURPOSE_KEY0_REG, this.EFUSE_PURPOSE_KEY0_SHIFT],\r\n            [this.EFUSE_PURPOSE_KEY1_REG, this.EFUSE_PURPOSE_KEY1_SHIFT],\r\n            [this.EFUSE_PURPOSE_KEY2_REG, this.EFUSE_PURPOSE_KEY2_SHIFT],\r\n            [this.EFUSE_PURPOSE_KEY3_REG, this.EFUSE_PURPOSE_KEY3_SHIFT],\r\n            [this.EFUSE_PURPOSE_KEY4_REG, this.EFUSE_PURPOSE_KEY4_SHIFT],\r\n            [this.EFUSE_PURPOSE_KEY5_REG, this.EFUSE_PURPOSE_KEY5_SHIFT],\r\n        ];\r\n        const [reg, shift] = regShiftDictionary[keyBlock];\r\n        const registerValue = await loader.readReg(reg);\r\n        return (registerValue >> shift) & 0xf;\r\n    }\r\n    async isFlashEncryptionKeyValid(loader) {\r\n        const purposes = [];\r\n        for (let i = 0; i <= this.EFUSE_MAX_KEY; i++) {\r\n            const purpose = await this.getKeyBlockPurpose(loader, i);\r\n            purposes.push(purpose);\r\n        }\r\n        const isXtsAes128Key = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES128_KEY);\r\n        if (typeof isXtsAes128Key !== undefined) {\r\n            return true;\r\n        }\r\n        const isXtsAes256Key1 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_1);\r\n        const isXtsAes256Key2 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_2);\r\n        if (typeof isXtsAes256Key1 !== undefined && typeof isXtsAes256Key2 !== undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32p4.cd9b5c55.js.map"}