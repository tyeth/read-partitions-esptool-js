{"mappings":";;;;;;;;;;;;;AACO,MAAM,kDAAmB,CAAA,GAAA,iBAAS;IACrC,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,UAAU,GAAG;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,GAAG;QACvC,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,uBAAuB,GAAG;QAC/B,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,UAAU,GAAG;YACd;gBAAC;gBAAY;gBAAY;aAAU;YACnC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAkB;YAC3C;gBAAC;gBAAY;gBAAY;aAAY;YACrC;gBAAC;gBAAY;gBAAY;aAAY;YACrC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAW;YACpC;gBAAC;gBAAY;gBAAY;aAAW;YACpC;gBAAC;gBAAY;gBAAY;aAAgB;SAC5C;IACL;IACA,MAAM,cAAc,MAAM,EAAE;QACxB,MAAM,UAAU;QAChB,OAAO,AAAE,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,YAAa,IAAK;IACjF;IACA,MAAM,oBAAoB,MAAM,EAAE;QAC9B,MAAM,UAAU;QAChB,OAAO,AAAE,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,YAAa,KAAM;IAClF;IACA,MAAM,oBAAoB,MAAM,EAAE;QAC9B,MAAM,UAAU;QAChB,OAAO,AAAE,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,YAAa,KAAM;IAClF;IACA,MAAM,mBAAmB,MAAM,EAAE;QAC7B,MAAM,SAAS,MAAM,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI;QACJ,IAAI,WAAW,GACX,OAAO;aAGP,OAAO;QAEX,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC;QAChD,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC;QAChD,OAAO,GAAG,KAAK,YAAY,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;IACxD;IACA,MAAM,gBAAgB,MAAM,EAAE;QAC1B,OAAO;YAAC;YAAa;YAAgB;YAAe;SAAQ;IAChE;IACA,MAAM,eAAe,MAAM,EAAE;QACzB,iCAAiC;QACjC,OAAO;IACX;IACA,KAAK,CAAC,EAAE;QACJ,MAAM,IAAI,AAAC,CAAA,CAAC,CAAA,EAAG,QAAQ,CAAC;QACxB,OAAO,EAAE,MAAM,KAAK,IAAI,MAAM,IAAI;IACtC;IACA,MAAM,YAAY,MAAM,EAAE;QACtB,MAAM,QAAQ,AAAC,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,cAAc,IAAK;QAC5D,OAAO,KAAK,CAAC,sBAAsB;QACnC,IAAI,SAAS,IAAI,CAAC,kBAAkB,EAChC,OAAO,aAAa,GAAG,IAAI,CAAC,aAAa;IAEjD;IACA,MAAM,QAAQ,MAAM,EAAE;QAClB,IAAI,OAAO,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa;QAClD,OAAO,SAAS;QAChB,IAAI,OAAO,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG;QACrD,OAAO,AAAC,SAAS,IAAK;QACtB,MAAM,MAAM,IAAI,WAAW;QAC3B,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,IAAK;QACvB,GAAG,CAAC,EAAE,GAAG,OAAO;QAChB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,KAAM;QACxB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,KAAM;QACxB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,IAAK;QACvB,GAAG,CAAC,EAAE,GAAG,OAAO;QAChB,OAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IACpB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACxB;IACA,aAAa,MAAM,EAAE,IAAI,EAAE;QACvB,OAAO;IACX;AACJ","sources":["../../lib/targets/esp32h2.js"],"sourcesContent":["import { ESP32C6ROM } from \"./esp32c6.js\";\r\nexport class ESP32H2ROM extends ESP32C6ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32-H2\";\r\n        this.IMAGE_CHIP_ID = 16;\r\n        this.EFUSE_BASE = 0x600b0800;\r\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\r\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\r\n        this.UART_CLKDIV_REG = 0x3ff40014;\r\n        this.UART_CLKDIV_MASK = 0xfffff;\r\n        this.UART_DATE_REG_ADDR = 0x6000007c;\r\n        this.FLASH_WRITE_SIZE = 0x400;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0x0;\r\n        this.SPI_REG_BASE = 0x60002000;\r\n        this.SPI_USR_OFFS = 0x18;\r\n        this.SPI_USR1_OFFS = 0x1c;\r\n        this.SPI_USR2_OFFS = 0x20;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\r\n        this.SPI_MISO_DLEN_OFFS = 0x28;\r\n        this.SPI_W0_OFFS = 0x58;\r\n        this.USB_RAM_BLOCK = 0x800;\r\n        this.UARTDEV_BUF_NO_USB = 3;\r\n        this.UARTDEV_BUF_NO = 0x3fcef14c;\r\n        this.IROM_MAP_START = 0x42000000;\r\n        this.IROM_MAP_END = 0x42800000;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x42000000, 0x43000000, \"DROM\"],\r\n            [0x40800000, 0x40880000, \"DRAM\"],\r\n            [0x40800000, 0x40880000, \"BYTE_ACCESSIBLE\"],\r\n            [0x4004ac00, 0x40050000, \"DROM_MASK\"],\r\n            [0x40000000, 0x4004ac00, \"IROM_MASK\"],\r\n            [0x42000000, 0x43000000, \"IROM\"],\r\n            [0x40800000, 0x40880000, \"IRAM\"],\r\n            [0x50000000, 0x50004000, \"RTC_IRAM\"],\r\n            [0x50000000, 0x50004000, \"RTC_DRAM\"],\r\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\r\n        ];\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const numWord = 4;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 0) & 0x07;\r\n    }\r\n    async getMinorChipVersion(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 18) & 0x07;\r\n    }\r\n    async getMajorChipVersion(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 21) & 0x03;\r\n    }\r\n    async getChipDescription(loader) {\r\n        const pkgVer = await this.getPkgVersion(loader);\r\n        let desc;\r\n        if (pkgVer === 0) {\r\n            desc = \"ESP32-H2\";\r\n        }\r\n        else {\r\n            desc = \"unknown ESP32-H2\";\r\n        }\r\n        const majorRev = await this.getMajorChipVersion(loader);\r\n        const minorRev = await this.getMinorChipVersion(loader);\r\n        return `${desc} (revision v${majorRev}.${minorRev})`;\r\n    }\r\n    async getChipFeatures(loader) {\r\n        return [\"BT 5 (LE)\", \"IEEE802.15.4\", \"Single Core\", \"96MHz\"];\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        // ESP32H2 XTAL is fixed to 32MHz\r\n        return 32;\r\n    }\r\n    _d2h(d) {\r\n        const h = (+d).toString(16);\r\n        return h.length === 1 ? \"0\" + h : h;\r\n    }\r\n    async postConnect(loader) {\r\n        const bufNo = (await loader.readReg(this.UARTDEV_BUF_NO)) & 0xff;\r\n        loader.debug(\"In _post_connect \" + bufNo);\r\n        if (bufNo == this.UARTDEV_BUF_NO_USB) {\r\n            loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\r\n        }\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\r\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n    getEraseSize(offset, size) {\r\n        return size;\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32h2.b2d4a99f.js.map"}