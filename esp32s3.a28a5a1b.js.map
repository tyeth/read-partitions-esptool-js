{"mappings":"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","sources":["../../lib/targets/esp32s3.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\r\nexport class ESP32S3ROM extends ESP32ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32-S3\";\r\n        this.IMAGE_CHIP_ID = 9;\r\n        this.EFUSE_BASE = 0x60007000;\r\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\r\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x44;\r\n        this.EFUSE_BLOCK2_ADDR = this.EFUSE_BASE + 0x5c;\r\n        this.UART_CLKDIV_REG = 0x60000014;\r\n        this.UART_CLKDIV_MASK = 0xfffff;\r\n        this.UART_DATE_REG_ADDR = 0x60000080;\r\n        this.FLASH_WRITE_SIZE = 0x400;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0x0;\r\n        this.SPI_REG_BASE = 0x60002000;\r\n        this.SPI_USR_OFFS = 0x18;\r\n        this.SPI_USR1_OFFS = 0x1c;\r\n        this.SPI_USR2_OFFS = 0x20;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\r\n        this.SPI_MISO_DLEN_OFFS = 0x28;\r\n        this.SPI_W0_OFFS = 0x58;\r\n        this.USB_RAM_BLOCK = 0x800;\r\n        this.UARTDEV_BUF_NO_USB = 3;\r\n        this.UARTDEV_BUF_NO = 0x3fcef14c;\r\n        this.IROM_MAP_START = 0x42000000;\r\n        this.IROM_MAP_END = 0x44000000;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x3c000000, 0x3d000000, \"DROM\"],\r\n            [0x3d000000, 0x3e000000, \"EXTRAM_DATA\"],\r\n            [0x600fe000, 0x60100000, \"RTC_DRAM\"],\r\n            [0x3fc88000, 0x3fd00000, \"BYTE_ACCESSIBLE\"],\r\n            [0x3fc88000, 0x403e2000, \"MEM_INTERNAL\"],\r\n            [0x3fc88000, 0x3fd00000, \"DRAM\"],\r\n            [0x40000000, 0x4001a100, \"IROM_MASK\"],\r\n            [0x40370000, 0x403e0000, \"IRAM\"],\r\n            [0x600fe000, 0x60100000, \"RTC_IRAM\"],\r\n            [0x42000000, 0x42800000, \"IROM\"],\r\n            [0x50000000, 0x50002000, \"RTC_DATA\"],\r\n        ];\r\n    }\r\n    async getChipDescription(loader) {\r\n        const majorRev = await this.getMajorChipVersion(loader);\r\n        const minorRev = await this.getMinorChipVersion(loader);\r\n        const pkgVersion = await this.getPkgVersion(loader);\r\n        const chipName = {\r\n            0: \"ESP32-S3 (QFN56)\",\r\n            1: \"ESP32-S3-PICO-1 (LGA56)\",\r\n        };\r\n        return `${chipName[pkgVersion] || \"unknown ESP32-S3\"} (revision v${majorRev}.${minorRev})`;\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 21) & 0x07;\r\n    }\r\n    async getRawMinorChipVersion(loader) {\r\n        const hiNumWord = 5;\r\n        const hi = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * hiNumWord)) >> 23) & 0x01;\r\n        const lowNumWord = 3;\r\n        const low = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * lowNumWord)) >> 18) & 0x07;\r\n        return (hi << 3) + low;\r\n    }\r\n    async getMinorChipVersion(loader) {\r\n        const minorRaw = await this.getRawMinorChipVersion(loader);\r\n        if (await this.isEco0(loader, minorRaw)) {\r\n            return 0;\r\n        }\r\n        return this.getRawMinorChipVersion(loader);\r\n    }\r\n    async getRawMajorChipVersion(loader) {\r\n        const numWord = 5;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 24) & 0x03;\r\n    }\r\n    async getMajorChipVersion(loader) {\r\n        const minorRaw = await this.getRawMinorChipVersion(loader);\r\n        if (await this.isEco0(loader, minorRaw)) {\r\n            return 0;\r\n        }\r\n        return this.getRawMajorChipVersion(loader);\r\n    }\r\n    async getBlkVersionMajor(loader) {\r\n        const numWord = 4;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK2_ADDR + 4 * numWord)) >> 0) & 0x03;\r\n    }\r\n    async getBlkVersionMinor(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 24) & 0x07;\r\n    }\r\n    async isEco0(loader, minorRaw) {\r\n        // Workaround: The major version field was allocated to other purposes\r\n        // when block version is v1.1.\r\n        // Luckily only chip v0.0 have this kind of block version and efuse usage.\r\n        return ((minorRaw & 0x7) === 0 &&\r\n            (await this.getBlkVersionMajor(loader)) === 1 &&\r\n            (await this.getBlkVersionMinor(loader)) === 1);\r\n    }\r\n    async getFlashCap(loader) {\r\n        const numWord = 3;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const flashCap = (registerValue >> 27) & 0x07;\r\n        return flashCap;\r\n    }\r\n    async getFlashVendor(loader) {\r\n        const numWord = 4;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const vendorId = (registerValue >> 0) & 0x07;\r\n        const vendorMap = {\r\n            1: \"XMC\",\r\n            2: \"GD\",\r\n            3: \"FM\",\r\n            4: \"TT\",\r\n            5: \"BY\",\r\n        };\r\n        return vendorMap[vendorId] || \"\";\r\n    }\r\n    async getPsramCap(loader) {\r\n        const numWord = 4;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const psramCap = (registerValue >> 3) & 0x03;\r\n        return psramCap;\r\n    }\r\n    async getPsramVendor(loader) {\r\n        const numWord = 4;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const vendorId = (registerValue >> 7) & 0x03;\r\n        const vendorMap = {\r\n            1: \"AP_3v3\",\r\n            2: \"AP_1v8\",\r\n        };\r\n        return vendorMap[vendorId] || \"\";\r\n    }\r\n    async getChipFeatures(loader) {\r\n        const features = [\"Wi-Fi\", \"BLE\"];\r\n        const flashMap = {\r\n            0: null,\r\n            1: \"Embedded Flash 8MB\",\r\n            2: \"Embedded Flash 4MB\",\r\n        };\r\n        const flashCap = await this.getFlashCap(loader);\r\n        const flashVendor = await this.getFlashVendor(loader);\r\n        const flash = flashMap[flashCap];\r\n        const flashDescription = flash !== undefined ? flash : \"Unknown Embedded Flash\";\r\n        if (flash !== null) {\r\n            features.push(`${flashDescription} (${flashVendor})`);\r\n        }\r\n        const psramMap = {\r\n            0: null,\r\n            1: \"Embedded PSRAM 8MB\",\r\n            2: \"Embedded PSRAM 2MB\",\r\n        };\r\n        const psramCap = await this.getPsramCap(loader);\r\n        const psramVendor = await this.getPsramVendor(loader);\r\n        const psram = psramMap[psramCap];\r\n        const psramDescription = psram !== undefined ? psram : \"Unknown Embedded PSRAM\";\r\n        if (psram !== null) {\r\n            features.push(`${psramDescription} (${psramVendor})`);\r\n        }\r\n        return features;\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        return 40;\r\n    }\r\n    _d2h(d) {\r\n        const h = (+d).toString(16);\r\n        return h.length === 1 ? \"0\" + h : h;\r\n    }\r\n    async postConnect(loader) {\r\n        const bufNo = (await loader.readReg(this.UARTDEV_BUF_NO)) & 0xff;\r\n        loader.debug(\"In _post_connect \" + bufNo);\r\n        if (bufNo == this.UARTDEV_BUF_NO_USB) {\r\n            loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\r\n        }\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\r\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n    getEraseSize(offset, size) {\r\n        return size;\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32s3.a28a5a1b.js.map"}