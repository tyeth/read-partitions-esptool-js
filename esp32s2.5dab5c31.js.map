{"mappings":"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","sources":["../../lib/targets/esp32s2.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\r\nexport class ESP32S2ROM extends ESP32ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32-S2\";\r\n        this.IMAGE_CHIP_ID = 2;\r\n        this.IROM_MAP_START = 0x40080000;\r\n        this.IROM_MAP_END = 0x40b80000;\r\n        this.DROM_MAP_START = 0x3f000000;\r\n        this.DROM_MAP_END = 0x3f3f0000;\r\n        this.CHIP_DETECT_MAGIC_VALUE = [0x000007c6];\r\n        this.SPI_REG_BASE = 0x3f402000;\r\n        this.SPI_USR_OFFS = 0x18;\r\n        this.SPI_USR1_OFFS = 0x1c;\r\n        this.SPI_USR2_OFFS = 0x20;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\r\n        this.SPI_MISO_DLEN_OFFS = 0x28;\r\n        this.SPI_W0_OFFS = 0x58;\r\n        this.SPI_ADDR_REG_MSB = false;\r\n        this.MAC_EFUSE_REG = 0x3f41a044; // ESP32-S2 has special block for MAC efuses\r\n        this.UART_CLKDIV_REG = 0x3f400014;\r\n        this.SUPPORTS_ENCRYPTED_FLASH = true;\r\n        this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\r\n        // todo: use espefuse APIs to get this info\r\n        this.EFUSE_BASE = 0x3f41a000;\r\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\r\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\r\n        this.EFUSE_BLOCK2_ADDR = this.EFUSE_BASE + 0x05c;\r\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\r\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\r\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\r\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\r\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\r\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\r\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\r\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\r\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\r\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\r\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 19;\r\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\r\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\r\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\r\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\r\n        this.EFUSE_RD_REPEAT_DATA3_REG = this.EFUSE_BASE + 0x3c;\r\n        this.EFUSE_RD_REPEAT_DATA3_REG_FLASH_TYPE_MASK = 1 << 9;\r\n        this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\r\n        this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\r\n        this.PURPOSE_VAL_XTS_AES128_KEY = 4;\r\n        this.UARTDEV_BUF_NO = 0x3ffffd14; // Variable in ROM .bss which indicates the port in use\r\n        this.UARTDEV_BUF_NO_USB_OTG = 2; // Value of the above indicating that USB-OTG is in use\r\n        this.USB_RAM_BLOCK = 0x800; // Max block size USB-OTG is used\r\n        this.GPIO_STRAP_REG = 0x3f404038;\r\n        this.GPIO_STRAP_SPI_BOOT_MASK = 1 << 3; // Not download mode\r\n        this.GPIO_STRAP_VDDSPI_MASK = 1 << 4;\r\n        this.RTC_CNTL_OPTION1_REG = 0x3f408128;\r\n        this.RTC_CNTL_FORCE_DOWNLOAD_BOOT_MASK = 0x1; // Is download mode forced over USB?\r\n        this.RTCCNTL_BASE_REG = 0x3f408000;\r\n        this.RTC_CNTL_WDTCONFIG0_REG = this.RTCCNTL_BASE_REG + 0x0094;\r\n        this.RTC_CNTL_WDTCONFIG1_REG = this.RTCCNTL_BASE_REG + 0x0098;\r\n        this.RTC_CNTL_WDTWPROTECT_REG = this.RTCCNTL_BASE_REG + 0x00ac;\r\n        this.RTC_CNTL_WDT_WKEY = 0x50d83aa1;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x3f000000, 0x3ff80000, \"DROM\"],\r\n            [0x3f500000, 0x3ff80000, \"EXTRAM_DATA\"],\r\n            [0x3ff9e000, 0x3ffa0000, \"RTC_DRAM\"],\r\n            [0x3ff9e000, 0x40000000, \"BYTE_ACCESSIBLE\"],\r\n            [0x3ff9e000, 0x40072000, \"MEM_INTERNAL\"],\r\n            [0x3ffb0000, 0x40000000, \"DRAM\"],\r\n            [0x40000000, 0x4001a100, \"IROM_MASK\"],\r\n            [0x40020000, 0x40070000, \"IRAM\"],\r\n            [0x40070000, 0x40072000, \"RTC_IRAM\"],\r\n            [0x40080000, 0x40800000, \"IROM\"],\r\n            [0x50000000, 0x50002000, \"RTC_DATA\"],\r\n        ];\r\n        this.EFUSE_VDD_SPI_REG = this.EFUSE_BASE + 0x34;\r\n        this.VDD_SPI_XPD = 1 << 4;\r\n        this.VDD_SPI_TIEH = 1 << 5;\r\n        this.VDD_SPI_FORCE = 1 << 6;\r\n        this.UF2_FAMILY_ID = 0xbfdd4eee;\r\n        this.EFUSE_MAX_KEY = 5;\r\n        this.KEY_PURPOSES = {\r\n            0: \"USER/EMPTY\",\r\n            1: \"RESERVED\",\r\n            2: \"XTS_AES_256_KEY_1\",\r\n            3: \"XTS_AES_256_KEY_2\",\r\n            4: \"XTS_AES_128_KEY\",\r\n            5: \"HMAC_DOWN_ALL\",\r\n            6: \"HMAC_DOWN_JTAG\",\r\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\r\n            8: \"HMAC_UP\",\r\n            9: \"SECURE_BOOT_DIGEST0\",\r\n            10: \"SECURE_BOOT_DIGEST1\",\r\n            11: \"SECURE_BOOT_DIGEST2\",\r\n        };\r\n        this.UART_CLKDIV_MASK = 0xfffff;\r\n        this.UART_DATE_REG_ADDR = 0x60000078;\r\n        this.FLASH_WRITE_SIZE = 0x400;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const numWord = 4;\r\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\r\n        const word = await loader.readReg(addr);\r\n        const pkgVersion = (word >> 0) & 0x0f;\r\n        return pkgVersion;\r\n    }\r\n    async getMinorChipVersion(loader) {\r\n        const hiNumWord = 3;\r\n        const hi = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * hiNumWord)) >> 20) & 0x01;\r\n        const lowNumWord = 4;\r\n        const low = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * lowNumWord)) >> 4) & 0x07;\r\n        return (hi << 3) + low;\r\n    }\r\n    async getMajorChipVersion(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 18) & 0x03;\r\n    }\r\n    async getFlashVersion(loader) {\r\n        const numWord = 3;\r\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 21) & 0x0f;\r\n    }\r\n    async getChipDescription(loader) {\r\n        const chipDesc = {\r\n            0: \"ESP32-S2\",\r\n            1: \"ESP32-S2FH2\",\r\n            2: \"ESP32-S2FH4\",\r\n            102: \"ESP32-S2FNR2\",\r\n            100: \"ESP32-S2R2\",\r\n        };\r\n        const chipIndex = (await this.getFlashCap(loader)) + (await this.getPsramCap(loader)) * 100;\r\n        const majorRev = await this.getMajorChipVersion(loader);\r\n        const minorRev = await this.getMinorChipVersion(loader);\r\n        return `${chipDesc[chipIndex] || \"unknown ESP32-S2\"} (revision v${majorRev}.${minorRev})`;\r\n    }\r\n    async getFlashCap(loader) {\r\n        return await this.getFlashVersion(loader);\r\n    }\r\n    async getPsramVersion(loader) {\r\n        const numWord = 3;\r\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const psramCap = (registerValue >> 28) & 0x0f;\r\n        return psramCap;\r\n    }\r\n    async getPsramCap(loader) {\r\n        return await this.getPsramVersion(loader);\r\n    }\r\n    async getBlock2Version(loader) {\r\n        const numWord = 4;\r\n        const addr = this.EFUSE_BLOCK2_ADDR + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const block2Ver = (registerValue >> 4) & 0x07;\r\n        return block2Ver;\r\n    }\r\n    async getChipFeatures(loader) {\r\n        const features = [\"Wi-Fi\"];\r\n        const flashMap = {\r\n            0: \"No Embedded Flash\",\r\n            1: \"Embedded Flash 2MB\",\r\n            2: \"Embedded Flash 4MB\",\r\n        };\r\n        const flashCap = await this.getFlashCap(loader);\r\n        const flashDescription = flashMap[flashCap] || \"Unknown Embedded Flash\";\r\n        features.push(flashDescription);\r\n        const psramMap = {\r\n            0: \"No Embedded Flash\",\r\n            1: \"Embedded PSRAM 2MB\",\r\n            2: \"Embedded PSRAM 4MB\",\r\n        };\r\n        const psramCap = await this.getPsramCap(loader);\r\n        const psramDescription = psramMap[psramCap] || \"Unknown Embedded PSRAM\";\r\n        features.push(psramDescription);\r\n        const block2VersionMap = {\r\n            0: \"No calibration in BLK2 of efuse\",\r\n            1: \"ADC and temperature sensor calibration in BLK2 of efuse V1\",\r\n            2: \"ADC and temperature sensor calibration in BLK2 of efuse V2\",\r\n        };\r\n        const block2Ver = await this.getBlock2Version(loader);\r\n        const block2VersionDescription = block2VersionMap[block2Ver] || \"Unknown Calibration in BLK2\";\r\n        features.push(block2VersionDescription);\r\n        return features;\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        return 40;\r\n    }\r\n    _d2h(d) {\r\n        const h = (+d).toString(16);\r\n        return h.length === 1 ? \"0\" + h : h;\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\r\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n    getEraseSize(offset, size) {\r\n        return size;\r\n    }\r\n    async usingUsbOtg(loader) {\r\n        const uartNo = (await loader.readReg(this.UARTDEV_BUF_NO)) & 0xff;\r\n        return uartNo === this.UARTDEV_BUF_NO_USB_OTG;\r\n    }\r\n    async postConnect(loader) {\r\n        const usingUsbOtg = await this.usingUsbOtg(loader);\r\n        loader.debug(\"In _post_connect using USB OTG ?\" + usingUsbOtg);\r\n        if (usingUsbOtg) {\r\n            loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\r\n        }\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32s2.5dab5c31.js.map"}