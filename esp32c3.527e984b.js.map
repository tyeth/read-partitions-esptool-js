{"mappings":";;;;;;;;;;;;;AACO,MAAM,kDAAmB,CAAA,GAAA,eAAO;IACnC,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,GAAG;QACvC,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,uBAAuB,GAAG;QAC/B,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,UAAU,GAAG;YACd;gBAAC;gBAAY;gBAAY;aAAU;YACnC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAkB;YAC3C;gBAAC;gBAAY;gBAAY;aAAY;YACrC;gBAAC;gBAAY;gBAAY;aAAY;YACrC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAO;YAChC;gBAAC;gBAAY;gBAAY;aAAW;YACpC;gBAAC;gBAAY;gBAAY;aAAW;YACpC;gBAAC;gBAAY;gBAAY;aAAgB;SAC5C;IACL;IACA,MAAM,cAAc,MAAM,EAAE;QACxB,MAAM,UAAU;QAChB,MAAM,aAAa,IAAI,CAAC,UAAU,GAAG;QACrC,MAAM,OAAO,aAAa,IAAI;QAC9B,MAAM,QAAQ,MAAM,OAAO,OAAO,CAAC;QACnC,MAAM,aAAa,AAAC,SAAS,KAAM;QACnC,OAAO;IACX;IACA,MAAM,gBAAgB,MAAM,EAAE;QAC1B,MAAM,aAAa,IAAI,CAAC,UAAU,GAAG;QACrC,MAAM,UAAU;QAChB,MAAM,MAAM;QACZ,MAAM,OAAO,aAAa,IAAI;QAC9B,MAAM,MAAM,AAAC,CAAA,AAAC,MAAM,OAAO,OAAO,CAAC,QAAU,OAAO,GAAG,KAAM;QAC7D,OAAO;IACX;IACA,MAAM,oBAAoB,MAAM,EAAE;QAC9B,MAAM,YAAY;QAClB,MAAM,SAAS,IAAI,CAAC,UAAU,GAAG,QAAQ,IAAI;QAC7C,MAAM,KAAK,AAAE,MAAM,OAAO,OAAO,CAAC,WAAY,KAAM;QACpD,MAAM,aAAa;QACnB,MAAM,UAAU,IAAI,CAAC,UAAU,GAAG,QAAQ,IAAI;QAC9C,MAAM,MAAM,AAAE,MAAM,OAAO,OAAO,CAAC,YAAa,KAAM;QACtD,OAAO,AAAC,CAAA,MAAM,CAAA,IAAK;IACvB;IACA,MAAM,oBAAoB,MAAM,EAAE;QAC9B,MAAM,UAAU;QAChB,MAAM,OAAO,IAAI,CAAC,UAAU,GAAG,QAAQ,IAAI;QAC3C,OAAO,AAAE,MAAM,OAAO,OAAO,CAAC,SAAU,KAAM;IAClD;IACA,MAAM,mBAAmB,MAAM,EAAE;QAC7B,MAAM,WAAW;YACb,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;QACP;QACA,MAAM,YAAY,MAAM,IAAI,CAAC,aAAa,CAAC;QAC3C,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC;QAChD,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC;QAChD,OAAO,GAAG,QAAQ,CAAC,UAAU,IAAI,mBAAmB,YAAY,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;IAC7F;IACA,MAAM,YAAY,MAAM,EAAE;QACtB,MAAM,UAAU;QAChB,MAAM,aAAa,IAAI,CAAC,UAAU,GAAG;QACrC,MAAM,OAAO,aAAa,IAAI;QAC9B,MAAM,gBAAgB,MAAM,OAAO,OAAO,CAAC;QAC3C,MAAM,WAAW,AAAC,iBAAiB,KAAM;QACzC,OAAO;IACX;IACA,MAAM,eAAe,MAAM,EAAE;QACzB,MAAM,UAAU;QAChB,MAAM,aAAa,IAAI,CAAC,UAAU,GAAG;QACrC,MAAM,OAAO,aAAa,IAAI;QAC9B,MAAM,gBAAgB,MAAM,OAAO,OAAO,CAAC;QAC3C,MAAM,WAAW,AAAC,iBAAiB,IAAK;QACxC,MAAM,YAAY;YACd,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;QACP;QACA,OAAO,SAAS,CAAC,SAAS,IAAI;IAClC;IACA,MAAM,gBAAgB,MAAM,EAAE;QAC1B,MAAM,WAAW;YAAC;YAAS;SAAM;QACjC,MAAM,WAAW;YACb,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;QACP;QACA,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW,CAAC;QACxC,MAAM,cAAc,MAAM,IAAI,CAAC,cAAc,CAAC;QAC9C,MAAM,QAAQ,QAAQ,CAAC,SAAS;QAChC,MAAM,mBAAmB,UAAU,YAAY,QAAQ;QACvD,IAAI,UAAU,MACV,SAAS,IAAI,CAAC,GAAG,iBAAiB,EAAE,EAAE,YAAY,CAAC,CAAC;QAExD,OAAO;IACX;IACA,MAAM,eAAe,MAAM,EAAE;QACzB,OAAO;IACX;IACA,KAAK,CAAC,EAAE;QACJ,MAAM,IAAI,AAAC,CAAA,CAAC,CAAA,EAAG,QAAQ,CAAC;QACxB,OAAO,EAAE,MAAM,KAAK,IAAI,MAAM,IAAI;IACtC;IACA,MAAM,QAAQ,MAAM,EAAE;QAClB,IAAI,OAAO,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa;QAClD,OAAO,SAAS;QAChB,IAAI,OAAO,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG;QACrD,OAAO,AAAC,SAAS,IAAK;QACtB,MAAM,MAAM,IAAI,WAAW;QAC3B,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,IAAK;QACvB,GAAG,CAAC,EAAE,GAAG,OAAO;QAChB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,KAAM;QACxB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,KAAM;QACxB,GAAG,CAAC,EAAE,GAAG,AAAC,QAAQ,IAAK;QACvB,GAAG,CAAC,EAAE,GAAG,OAAO;QAChB,OAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IACpB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAChB,MACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACxB;IACA,aAAa,MAAM,EAAE,IAAI,EAAE;QACvB,OAAO;IACX;AACJ","sources":["../../lib/targets/esp32c3.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\r\nexport class ESP32C3ROM extends ESP32ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32-C3\";\r\n        this.IMAGE_CHIP_ID = 5;\r\n        this.EFUSE_BASE = 0x60008800;\r\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\r\n        this.UART_CLKDIV_REG = 0x3ff40014;\r\n        this.UART_CLKDIV_MASK = 0xfffff;\r\n        this.UART_DATE_REG_ADDR = 0x6000007c;\r\n        this.FLASH_WRITE_SIZE = 0x400;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0;\r\n        this.SPI_REG_BASE = 0x60002000;\r\n        this.SPI_USR_OFFS = 0x18;\r\n        this.SPI_USR1_OFFS = 0x1c;\r\n        this.SPI_USR2_OFFS = 0x20;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\r\n        this.SPI_MISO_DLEN_OFFS = 0x28;\r\n        this.SPI_W0_OFFS = 0x58;\r\n        this.IROM_MAP_START = 0x42000000;\r\n        this.IROM_MAP_END = 0x42800000;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x3c000000, 0x3c800000, \"DROM\"],\r\n            [0x3fc80000, 0x3fce0000, \"DRAM\"],\r\n            [0x3fc88000, 0x3fd00000, \"BYTE_ACCESSIBLE\"],\r\n            [0x3ff00000, 0x3ff20000, \"DROM_MASK\"],\r\n            [0x40000000, 0x40060000, \"IROM_MASK\"],\r\n            [0x42000000, 0x42800000, \"IROM\"],\r\n            [0x4037c000, 0x403e0000, \"IRAM\"],\r\n            [0x50000000, 0x50002000, \"RTC_IRAM\"],\r\n            [0x50000000, 0x50002000, \"RTC_DRAM\"],\r\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\r\n        ];\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const numWord = 3;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const word3 = await loader.readReg(addr);\r\n        const pkgVersion = (word3 >> 21) & 0x07;\r\n        return pkgVersion;\r\n    }\r\n    async getChipRevision(loader) {\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const numWord = 3;\r\n        const pos = 18;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;\r\n        return ret;\r\n    }\r\n    async getMinorChipVersion(loader) {\r\n        const hiNumWord = 5;\r\n        const hiAddr = this.EFUSE_BASE + 0x044 + 4 * hiNumWord;\r\n        const hi = ((await loader.readReg(hiAddr)) >> 23) & 0x01;\r\n        const lowNumWord = 3;\r\n        const lowAddr = this.EFUSE_BASE + 0x044 + 4 * lowNumWord;\r\n        const low = ((await loader.readReg(lowAddr)) >> 18) & 0x07;\r\n        return (hi << 3) + low;\r\n    }\r\n    async getMajorChipVersion(loader) {\r\n        const numWord = 5;\r\n        const addr = this.EFUSE_BASE + 0x044 + 4 * numWord;\r\n        return ((await loader.readReg(addr)) >> 24) & 0x03;\r\n    }\r\n    async getChipDescription(loader) {\r\n        const chipDesc = {\r\n            0: \"ESP32-C3 (QFN32)\",\r\n            1: \"ESP8685 (QFN28)\",\r\n            2: \"ESP32-C3 AZ (QFN32)\",\r\n            3: \"ESP8686 (QFN24)\",\r\n        };\r\n        const chipIndex = await this.getPkgVersion(loader);\r\n        const majorRev = await this.getMajorChipVersion(loader);\r\n        const minorRev = await this.getMinorChipVersion(loader);\r\n        return `${chipDesc[chipIndex] || \"Unknown ESP32-C3\"} (revision v${majorRev}.${minorRev})`;\r\n    }\r\n    async getFlashCap(loader) {\r\n        const numWord = 3;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const flashCap = (registerValue >> 27) & 0x07;\r\n        return flashCap;\r\n    }\r\n    async getFlashVendor(loader) {\r\n        const numWord = 4;\r\n        const block1Addr = this.EFUSE_BASE + 0x044;\r\n        const addr = block1Addr + 4 * numWord;\r\n        const registerValue = await loader.readReg(addr);\r\n        const vendorId = (registerValue >> 0) & 0x07;\r\n        const vendorMap = {\r\n            1: \"XMC\",\r\n            2: \"GD\",\r\n            3: \"FM\",\r\n            4: \"TT\",\r\n            5: \"ZBIT\",\r\n        };\r\n        return vendorMap[vendorId] || \"\";\r\n    }\r\n    async getChipFeatures(loader) {\r\n        const features = [\"Wi-Fi\", \"BLE\"];\r\n        const flashMap = {\r\n            0: null,\r\n            1: \"Embedded Flash 4MB\",\r\n            2: \"Embedded Flash 2MB\",\r\n            3: \"Embedded Flash 1MB\",\r\n            4: \"Embedded Flash 8MB\",\r\n        };\r\n        const flashCap = await this.getFlashCap(loader);\r\n        const flashVendor = await this.getFlashVendor(loader);\r\n        const flash = flashMap[flashCap];\r\n        const flashDescription = flash !== undefined ? flash : \"Unknown Embedded Flash\";\r\n        if (flash !== null) {\r\n            features.push(`${flashDescription} (${flashVendor})`);\r\n        }\r\n        return features;\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        return 40;\r\n    }\r\n    _d2h(d) {\r\n        const h = (+d).toString(16);\r\n        return h.length === 1 ? \"0\" + h : h;\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\r\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n    getEraseSize(offset, size) {\r\n        return size;\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32c3.527e984b.js.map"}