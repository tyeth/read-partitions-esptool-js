{"mappings":"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","sources":["../../lib/targets/esp32.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\r\nexport class ESP32ROM extends ROM {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.CHIP_NAME = \"ESP32\";\r\n        this.IMAGE_CHIP_ID = 0;\r\n        this.EFUSE_RD_REG_BASE = 0x3ff5a000;\r\n        this.DR_REG_SYSCON_BASE = 0x3ff66000;\r\n        this.UART_CLKDIV_REG = 0x3ff40014;\r\n        this.UART_CLKDIV_MASK = 0xfffff;\r\n        this.UART_DATE_REG_ADDR = 0x60000078;\r\n        this.XTAL_CLK_DIVIDER = 1;\r\n        this.IROM_MAP_START = 0x400d0000;\r\n        this.IROM_MAP_END = 0x40400000;\r\n        this.DROM_MAP_START = 0x3f400000;\r\n        this.DROM_MAP_END = 0x3f800000;\r\n        this.MEMORY_MAP = [\r\n            [0x00000000, 0x00010000, \"PADDING\"],\r\n            [0x3f400000, 0x3f800000, \"DROM\"],\r\n            [0x3f800000, 0x3fc00000, \"EXTRAM_DATA\"],\r\n            [0x3ff80000, 0x3ff82000, \"RTC_DRAM\"],\r\n            [0x3ff90000, 0x40000000, \"BYTE_ACCESSIBLE\"],\r\n            [0x3ffae000, 0x40000000, \"DRAM\"],\r\n            [0x3ffe0000, 0x3ffffffc, \"DIRAM_DRAM\"],\r\n            [0x40000000, 0x40070000, \"IROM\"],\r\n            [0x40070000, 0x40078000, \"CACHE_PRO\"],\r\n            [0x40078000, 0x40080000, \"CACHE_APP\"],\r\n            [0x40080000, 0x400a0000, \"IRAM\"],\r\n            [0x400a0000, 0x400bfffc, \"DIRAM_IRAM\"],\r\n            [0x400c0000, 0x400c2000, \"RTC_IRAM\"],\r\n            [0x400d0000, 0x40400000, \"IROM\"],\r\n            [0x50000000, 0x50002000, \"RTC_DATA\"],\r\n        ];\r\n        this.FLASH_SIZES = {\r\n            \"1MB\": 0x00,\r\n            \"2MB\": 0x10,\r\n            \"4MB\": 0x20,\r\n            \"8MB\": 0x30,\r\n            \"16MB\": 0x40,\r\n            \"32MB\": 0x50,\r\n            \"64MB\": 0x60,\r\n            \"128MB\": 0x70,\r\n        };\r\n        this.FLASH_FREQUENCY = {\r\n            \"80m\": 0xf,\r\n            \"40m\": 0x0,\r\n            \"26m\": 0x1,\r\n            \"20m\": 0x2,\r\n        };\r\n        this.FLASH_WRITE_SIZE = 0x400;\r\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\r\n        this.SPI_REG_BASE = 0x3ff42000;\r\n        this.SPI_USR_OFFS = 0x1c;\r\n        this.SPI_USR1_OFFS = 0x20;\r\n        this.SPI_USR2_OFFS = 0x24;\r\n        this.SPI_W0_OFFS = 0x80;\r\n        this.SPI_MOSI_DLEN_OFFS = 0x28;\r\n        this.SPI_MISO_DLEN_OFFS = 0x2c;\r\n    }\r\n    async readEfuse(loader, offset) {\r\n        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\r\n        loader.debug(\"Read efuse \" + addr);\r\n        return await loader.readReg(addr);\r\n    }\r\n    async getPkgVersion(loader) {\r\n        const word3 = await this.readEfuse(loader, 3);\r\n        let pkgVersion = (word3 >> 9) & 0x07;\r\n        pkgVersion += ((word3 >> 2) & 0x1) << 3;\r\n        return pkgVersion;\r\n    }\r\n    async getChipRevision(loader) {\r\n        const word3 = await this.readEfuse(loader, 3);\r\n        const word5 = await this.readEfuse(loader, 5);\r\n        const apbCtlDate = await loader.readReg(this.DR_REG_SYSCON_BASE + 0x7c);\r\n        const revBit0 = (word3 >> 15) & 0x1;\r\n        const revBit1 = (word5 >> 20) & 0x1;\r\n        const revBit2 = (apbCtlDate >> 31) & 0x1;\r\n        if (revBit0 != 0) {\r\n            if (revBit1 != 0) {\r\n                if (revBit2 != 0) {\r\n                    return 3;\r\n                }\r\n                else {\r\n                    return 2;\r\n                }\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    async getChipDescription(loader) {\r\n        const chipDesc = [\r\n            \"ESP32-D0WDQ6\",\r\n            \"ESP32-D0WD\",\r\n            \"ESP32-D2WD\",\r\n            \"\",\r\n            \"ESP32-U4WDH\",\r\n            \"ESP32-PICO-D4\",\r\n            \"ESP32-PICO-V3-02\",\r\n        ];\r\n        let chipName = \"\";\r\n        const pkgVersion = await this.getPkgVersion(loader);\r\n        const chipRevision = await this.getChipRevision(loader);\r\n        const rev3 = chipRevision == 3;\r\n        const single_core = (await this.readEfuse(loader, 3)) & (1 << 0);\r\n        if (single_core != 0) {\r\n            chipDesc[0] = \"ESP32-S0WDQ6\";\r\n            chipDesc[1] = \"ESP32-S0WD\";\r\n        }\r\n        if (rev3) {\r\n            chipDesc[5] = \"ESP32-PICO-V3\";\r\n        }\r\n        if (pkgVersion >= 0 && pkgVersion <= 6) {\r\n            chipName = chipDesc[pkgVersion];\r\n        }\r\n        else {\r\n            chipName = \"Unknown ESP32\";\r\n        }\r\n        if (rev3 && (pkgVersion === 0 || pkgVersion === 1)) {\r\n            chipName += \"-V3\";\r\n        }\r\n        return chipName + \" (revision \" + chipRevision + \")\";\r\n    }\r\n    async getChipFeatures(loader) {\r\n        const features = [\"Wi-Fi\"];\r\n        const word3 = await this.readEfuse(loader, 3);\r\n        const chipVerDisBt = word3 & (1 << 1);\r\n        if (chipVerDisBt === 0) {\r\n            features.push(\" BT\");\r\n        }\r\n        const chipVerDisAppCpu = word3 & (1 << 0);\r\n        if (chipVerDisAppCpu !== 0) {\r\n            features.push(\" Single Core\");\r\n        }\r\n        else {\r\n            features.push(\" Dual Core\");\r\n        }\r\n        const chipCpuFreqRated = word3 & (1 << 13);\r\n        if (chipCpuFreqRated !== 0) {\r\n            const chipCpuFreqLow = word3 & (1 << 12);\r\n            if (chipCpuFreqLow !== 0) {\r\n                features.push(\" 160MHz\");\r\n            }\r\n            else {\r\n                features.push(\" 240MHz\");\r\n            }\r\n        }\r\n        const pkgVersion = await this.getPkgVersion(loader);\r\n        if ([2, 4, 5, 6].indexOf(pkgVersion) !== -1) {\r\n            features.push(\" Embedded Flash\");\r\n        }\r\n        if (pkgVersion === 6) {\r\n            features.push(\" Embedded PSRAM\");\r\n        }\r\n        const word4 = await this.readEfuse(loader, 4);\r\n        const adcVref = (word4 >> 8) & 0x1f;\r\n        if (adcVref !== 0) {\r\n            features.push(\" VRef calibration in efuse\");\r\n        }\r\n        const blk3PartRes = (word3 >> 14) & 0x1;\r\n        if (blk3PartRes !== 0) {\r\n            features.push(\" BLK3 partially reserved\");\r\n        }\r\n        const word6 = await this.readEfuse(loader, 6);\r\n        const codingScheme = word6 & 0x3;\r\n        const codingSchemeArr = [\"None\", \"3/4\", \"Repeat (UNSUPPORTED)\", \"Invalid\"];\r\n        features.push(\" Coding Scheme \" + codingSchemeArr[codingScheme]);\r\n        return features;\r\n    }\r\n    async getCrystalFreq(loader) {\r\n        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\r\n        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;\r\n        let normXtal;\r\n        if (etsXtal > 33) {\r\n            normXtal = 40;\r\n        }\r\n        else {\r\n            normXtal = 26;\r\n        }\r\n        if (Math.abs(normXtal - etsXtal) > 1) {\r\n            loader.info(\"WARNING: Unsupported crystal in use\");\r\n        }\r\n        return normXtal;\r\n    }\r\n    _d2h(d) {\r\n        const h = (+d).toString(16);\r\n        return h.length === 1 ? \"0\" + h : h;\r\n    }\r\n    async readMac(loader) {\r\n        let mac0 = await this.readEfuse(loader, 1);\r\n        mac0 = mac0 >>> 0;\r\n        let mac1 = await this.readEfuse(loader, 2);\r\n        mac1 = mac1 >>> 0;\r\n        const mac = new Uint8Array(6);\r\n        mac[0] = (mac1 >> 8) & 0xff;\r\n        mac[1] = mac1 & 0xff;\r\n        mac[2] = (mac0 >> 24) & 0xff;\r\n        mac[3] = (mac0 >> 16) & 0xff;\r\n        mac[4] = (mac0 >> 8) & 0xff;\r\n        mac[5] = mac0 & 0xff;\r\n        return (this._d2h(mac[0]) +\r\n            \":\" +\r\n            this._d2h(mac[1]) +\r\n            \":\" +\r\n            this._d2h(mac[2]) +\r\n            \":\" +\r\n            this._d2h(mac[3]) +\r\n            \":\" +\r\n            this._d2h(mac[4]) +\r\n            \":\" +\r\n            this._d2h(mac[5]));\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"esp32.e4013594.js.map"}